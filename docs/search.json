[
  {
    "objectID": "Project_2.html",
    "href": "Project_2.html",
    "title": "ST558 - Project 2 - Shinies!",
    "section": "",
    "text": "#reading in the required libraries, collected from different code chunks\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter()  masks stats::filter()\n✖ purrr::flatten() masks jsonlite::flatten()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nlibrary(dplyr)\nlibrary(r2country)\n\nWarning: package 'r2country' was built under R version 4.4.1\n\n\n\n#pulling the values from the chosen api\njust_values &lt;- function(date, currency){\n  \n  #building the url\n  URL &lt;- paste(\"https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@\",\n               date,\n               \"/v1/currencies/\",\n               currency,\n               \".json\",\n               sep = \"\")\n  \n  #parsing the data\n  value_parse &lt;- GET(URL)$content |&gt;\n    rawToChar() |&gt;\n    fromJSON() |&gt;\n    as_tibble()\n  \n\n  #the returned data looked odd so pivoting it longer for later use\n  value_parse &lt;- bind_rows(value_parse[[2]], .id = \"currency\") |&gt;\n    pivot_longer(cols = everything())\n  \n  #changing `name` to isocode for later use\n  names(value_parse)[names(value_parse) == 'name'] &lt;- 'isocode'\n\n  return(value_parse)\n}\n\n\n#testing the function\njust_values(\"2024-06-05\", \"zmk\")\n\n# A tibble: 770 × 2\n   isocode        value\n   &lt;chr&gt;          &lt;dbl&gt;\n 1 $myro    0.000157   \n 2 $wen     0.176      \n 3 00       0.000535   \n 4 0x0      0.000131   \n 5 1000sats 0.115      \n 6 10set    0.0000548  \n 7 1inch    0.0000797  \n 8 aave     0.000000369\n 9 abt      0.0000102  \n10 ach      0.00124    \n# ℹ 760 more rows\n\n\n\n#gathering just the names of the currencies as they are stored in a different part of the api\njust_names &lt;- function(date){\n  \n  #building the url \n  currency_api_URL &lt;- paste(\"https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@\",\n               date,\n               \"/v1/currencies.json\",\n               sep = \"\")\n  \n  #parsing the data\n  name_parse &lt;- GET(currency_api_URL)$content |&gt;\n    rawToChar() |&gt;\n    fromJSON() |&gt;\n    as.data.frame() |&gt;\n    as_tibble() |&gt; \n    #the names of currencies are stored as column names, adding observation number to use later on \n    mutate(obs.number = row_number()) |&gt;\n    #using the observation numbers to pivot the table longer \n    pivot_longer(-obs.number,\n               values_to = \"currency_name\")\n  \n  #entering NA values for blank names \n  name_parse[name_parse == \"\"] = NA\n  \n  #cleaning up the names\n  name_parse$name &lt;- gsub(\"^X\", \"\", name_parse$name)\n\n  #the `$` sign is part of specific crypto currencies so adding that in\n  name_parse$name[1:2] &lt;- gsub(\"^.\", \"$\", name_parse$name[1:2])\n  \n  #changing `name` to isocode for later use\n  names(name_parse)[names(name_parse) == 'name'] &lt;- 'isocode'\n  \n  return(name_parse)\n}\n\n\n#testing the function\njust_names(\"2024-06-05\")\n\n# A tibble: 770 × 3\n   obs.number isocode  currency_name\n        &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;        \n 1          1 $myro    &lt;NA&gt;         \n 2          1 $wen     &lt;NA&gt;         \n 3          1 00       00 Token     \n 4          1 0x0      &lt;NA&gt;         \n 5          1 1000sats &lt;NA&gt;         \n 6          1 10set    Tenset       \n 7          1 1inch    1inch        \n 8          1 aave     Aave         \n 9          1 abt      Arcblock     \n10          1 ach      Alchemy Pay  \n# ℹ 760 more rows\n\n\n\n#wanted to enter just the currency's name instead of knowing the isocode off the top of my head thus adding a helper function to spit out the isocode given the currency name\nget_isocode &lt;- function(date, full_currency_name){\n  \n  #pulling in the names function\n  directory &lt;- just_names(date)\n  \n  #adding condition that when the name is not present in the currency directory, an error code is displayed \n  if(!(full_currency_name %in% directory$currency_name)){\n    stop(\"Currency not found, please check currency name\") \n  }  \n  \n  else if(full_currency_name %in% directory$currency_name){\n    \n    #otherwise, matching the currency name to the isocode and returning the isocode \n    match &lt;- full_currency_name\n    isocode &lt;- as.character(directory[which(directory$currency_name == match), \"isocode\"])\n    \n    return(isocode)\n  }\n}\n\n\n#testing the function\nget_isocode(\"2024-03-02\", \"Aergo\")\n\n[1] \"aergo\"\n\n\n\n#creating a combine function to show all information \ncombine_names_currency &lt;- function(date, full_currency_name){  \n  \n    #pulling in the helper function \n    cur_code &lt;- get_isocode(date, full_currency_name)\n  \n    #pulling in the names function \n    cur_names &lt;- just_names(date)\n  \n    #pulling in the value function but using the currency's name instead of the isocode\n    cur_value &lt;- just_values(date, cur_code)\n  \n    #creating a list that would display common functions at the top of the returned tibble \n    matchlist = c(\"usd\",\"eur\", \"btc\", \"eth\", cur_code)\n  \n    #joining all of the tibbles \n    full_conversion &lt;- full_join(cur_names, cur_value)\n  \n    full_conversion &lt;- full_conversion |&gt;\n      #showing only the name, currency names and the value\n      select(isocode, currency_name, value)|&gt;\n      #moving the common currencies to the top \n      arrange(!isocode %in% matchlist) \n  \n    return(full_conversion)\n}\n\n\n#testing the function\ncombine_names_currency(\"2024-06-05\", \"Aergo\")\n\nJoining with `by = join_by(isocode)`\n\n\n# A tibble: 770 × 3\n   isocode  currency_name        value\n   &lt;chr&gt;    &lt;chr&gt;                &lt;dbl&gt;\n 1 aergo    Aergo           1         \n 2 btc      Bitcoin         0.00000160\n 3 eth      Ethereum        0.0000298 \n 4 eur      Euro            0.104     \n 5 usd      US Dollar       0.113     \n 6 $myro    &lt;NA&gt;            0.464     \n 7 $wen     &lt;NA&gt;          521.        \n 8 00       00 Token        1.58      \n 9 0x0      &lt;NA&gt;            0.387     \n10 1000sats &lt;NA&gt;          341.        \n# ℹ 760 more rows\n\n\n\n#adding names of countries the currencies originate from and the type of currency it is\nadd_country_type &lt;- function(date, full_currency_name, country_name){\n  \n  #using data built into `r2country` and chnaging the `names` column to prevent future issues  \n  names(country_names)[names(country_names) == 'name'] &lt;- 'country_name'\n  \n  #combining two `r2country` tibbles\n  country &lt;- full_join(country_money, country_names)\n  \n  #lowering the case of isocodes\n  country &lt;- country |&gt;\n    mutate(isocode = tolower(isocode))|&gt;\n    select(isocode, country_name) \n  \n  #pulling in the combined tibble\n  convert_money &lt;- combine_names_currency(date, full_currency_name)\n  \n  #adding an additional column \n  convert_money$type &lt;- NA\n\n  #combining the country and combined tibble from api\n  country_convert &lt;- left_join(convert_money, country)\n\n  #adding a type function\n  country_convert &lt;- country_convert |&gt;\n    #changing some misshandled data \n    mutate(country_name = if_else(currency_name == \"Zimbabwean Dollar\", \"Zimbabwe\", country_name)) |&gt;\n    #adding currency type based on if it originated from a country or not\n    mutate(type = if_else(is.na(country_name), \"crypto\", \"physical\"))\n  \n  return(country_convert)\n}\n\n\n#testing the function\nadd_country_type(\"2024-06-05\", \"Aergo\")\n\nJoining with `by = join_by(ID)`\nJoining with `by = join_by(isocode)`\nJoining with `by = join_by(isocode)`\n\n\n# A tibble: 819 × 5\n   isocode currency_name      value type     country_name\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;       \n 1 aergo   Aergo         1          crypto   &lt;NA&gt;        \n 2 btc     Bitcoin       0.00000160 crypto   &lt;NA&gt;        \n 3 eth     Ethereum      0.0000298  crypto   &lt;NA&gt;        \n 4 eur     Euro          0.104      physical Andorra     \n 5 eur     Euro          0.104      physical Austria     \n 6 eur     Euro          0.104      physical Belgium     \n 7 eur     Euro          0.104      physical Croatia     \n 8 eur     Euro          0.104      physical Cyprus      \n 9 eur     Euro          0.104      physical Estonia     \n10 eur     Euro          0.104      physical Finland     \n# ℹ 809 more rows\n\n\n\n#creating a function that returns the tibbles with type information but not the country information\ntype_only &lt;- function(date, full_currency_name){\n  \n  #pulling in the country and type function\n  with_dups &lt;- add_country_type(date, full_currency_name)\n  \n  #removing some duplicated values\n  without_dups &lt;- with_dups |&gt;\n    #dropping the country column \n    select(!country_name) |&gt;\n    #removing the dup values caused by multiple countries using the same currency\n    distinct(isocode, .keep_all = TRUE)\n  \n  return(without_dups)\n}\n\n\n#testing the function\ntype_only(\"2024-06-05\", \"Aergo\")\n\nJoining with `by = join_by(ID)`\nJoining with `by = join_by(isocode)`\nJoining with `by = join_by(isocode)`\n\n\n# A tibble: 770 × 4\n   isocode  currency_name        value type    \n   &lt;chr&gt;    &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;   \n 1 aergo    Aergo           1          crypto  \n 2 btc      Bitcoin         0.00000160 crypto  \n 3 eth      Ethereum        0.0000298  crypto  \n 4 eur      Euro            0.104      physical\n 5 usd      US Dollar       0.113      physical\n 6 $myro    &lt;NA&gt;            0.464      crypto  \n 7 $wen     &lt;NA&gt;          521.         crypto  \n 8 00       00 Token        1.58       crypto  \n 9 0x0      &lt;NA&gt;            0.387      crypto  \n10 1000sats &lt;NA&gt;          341.         crypto  \n# ℹ 760 more rows\n\n\n\n#creating a function that outputs the values of a currency from seven days ago \ncurrency_trend_day &lt;- function(date, full_currency_name){\n  \n  #changing the character value to a date one\n  date_value  &lt;- as.Date(date)\n  \n  #subtarcting 7 days from the date given \n  minus_7 &lt;- date_value - 7\n  \n  #adding an error code if the date given travels outside of api range \n  if(!(minus_7 &gt; as.Date(\"2024-03-02\"))){\n  stop(\"Date out of range for api\")\n  }\n  \n  #otherwise returniing the requested data\n  else {\n    currency_trend &lt;- type_only(minus_7, full_currency_name)\n    \n    return(currency_trend)\n  }\n}\n\n\n#testing the function\ncurrency_trend_day(\"2024-06-05\", \"Aergo\")\n\nJoining with `by = join_by(ID)`\nJoining with `by = join_by(isocode)`\nJoining with `by = join_by(isocode)`\n\n\n# A tibble: 770 × 4\n   isocode  currency_name        value type    \n   &lt;chr&gt;    &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;   \n 1 aergo    Aergo           1          crypto  \n 2 btc      Bitcoin         0.00000185 crypto  \n 3 eth      Ethereum        0.0000329  crypto  \n 4 eur      Euro            0.116      physical\n 5 usd      US Dollar       0.126      physical\n 6 $myro    &lt;NA&gt;            0.446      crypto  \n 7 $wen     &lt;NA&gt;          511.         crypto  \n 8 00       00 Token        1.72       crypto  \n 9 0x0      &lt;NA&gt;            0.462      crypto  \n10 1000sats &lt;NA&gt;          402.         crypto  \n# ℹ 760 more rows\n\n\n\n#repeating with a 30 day trend\ncurrency_trend_month &lt;- function(date, full_currency_name){\n  \n  date_value  &lt;- as.Date(date)\n  \n  minus_30 &lt;- date_value - 30\n  \n  if(!(minus_30 &gt; as.Date(\"2024-03-02\"))){\n  stop(\"Date out of range for api\") \n  }  \n  \n  else {\n    currency_trend &lt;- type_only(minus_30, full_currency_name)\n        \n    return(currency_trend)\n  }\n}\n\n\n#testing the function\ncurrency_trend_month(\"2024-06-05\", \"Aergo\")\n\nJoining with `by = join_by(ID)`\nJoining with `by = join_by(isocode)`\nJoining with `by = join_by(isocode)`\n\n\n# A tibble: 759 × 4\n   isocode  currency_name        value type    \n   &lt;chr&gt;    &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;   \n 1 aergo    Aergo           1          crypto  \n 2 btc      Bitcoin         0.00000206 crypto  \n 3 eth      Ethereum        0.0000420  crypto  \n 4 eur      Euro            0.123      physical\n 5 usd      US Dollar       0.132      physical\n 6 $myro    &lt;NA&gt;            0.794      crypto  \n 7 $wen     &lt;NA&gt;          685.         crypto  \n 8 00       00 Token        1.59       crypto  \n 9 0x0      &lt;NA&gt;            0.367      crypto  \n10 1000sats &lt;NA&gt;          471.         crypto  \n# ℹ 749 more rows\n\n\n\n#creating a final function to return everything previously run\nfinal_function &lt;- function(date, full_currency_name){\n  \n  final_values &lt;- add_country_type(date, full_currency_name)\n  seven_day_trend &lt;- currency_trend_day(date, full_currency_name)\n  month_trend &lt;- currency_trend_month(date, full_currency_name)\n  \n  #combining the returns into a single list\n  values &lt;- list(final_values, seven_day_trend, month_trend)\n  \n  return(values)\n}\n\n\n#testing the function\nfinal_function(\"2024-06-05\", \"Aergo\")\n\nJoining with `by = join_by(ID)`\nJoining with `by = join_by(isocode)`\nJoining with `by = join_by(isocode)`\nJoining with `by = join_by(ID)`\nJoining with `by = join_by(isocode)`\nJoining with `by = join_by(isocode)`\nJoining with `by = join_by(ID)`\nJoining with `by = join_by(isocode)`\nJoining with `by = join_by(isocode)`\n\n\n[[1]]\n# A tibble: 819 × 5\n   isocode currency_name      value type     country_name\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;       \n 1 aergo   Aergo         1          crypto   &lt;NA&gt;        \n 2 btc     Bitcoin       0.00000160 crypto   &lt;NA&gt;        \n 3 eth     Ethereum      0.0000298  crypto   &lt;NA&gt;        \n 4 eur     Euro          0.104      physical Andorra     \n 5 eur     Euro          0.104      physical Austria     \n 6 eur     Euro          0.104      physical Belgium     \n 7 eur     Euro          0.104      physical Croatia     \n 8 eur     Euro          0.104      physical Cyprus      \n 9 eur     Euro          0.104      physical Estonia     \n10 eur     Euro          0.104      physical Finland     \n# ℹ 809 more rows\n\n[[2]]\n# A tibble: 770 × 4\n   isocode  currency_name        value type    \n   &lt;chr&gt;    &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;   \n 1 aergo    Aergo           1          crypto  \n 2 btc      Bitcoin         0.00000185 crypto  \n 3 eth      Ethereum        0.0000329  crypto  \n 4 eur      Euro            0.116      physical\n 5 usd      US Dollar       0.126      physical\n 6 $myro    &lt;NA&gt;            0.446      crypto  \n 7 $wen     &lt;NA&gt;          511.         crypto  \n 8 00       00 Token        1.72       crypto  \n 9 0x0      &lt;NA&gt;            0.462      crypto  \n10 1000sats &lt;NA&gt;          402.         crypto  \n# ℹ 760 more rows\n\n[[3]]\n# A tibble: 759 × 4\n   isocode  currency_name        value type    \n   &lt;chr&gt;    &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;   \n 1 aergo    Aergo           1          crypto  \n 2 btc      Bitcoin         0.00000206 crypto  \n 3 eth      Ethereum        0.0000420  crypto  \n 4 eur      Euro            0.123      physical\n 5 usd      US Dollar       0.132      physical\n 6 $myro    &lt;NA&gt;            0.794      crypto  \n 7 $wen     &lt;NA&gt;          685.         crypto  \n 8 00       00 Token        1.59       crypto  \n 9 0x0      &lt;NA&gt;            0.367      crypto  \n10 1000sats &lt;NA&gt;          471.         crypto  \n# ℹ 749 more rows\n\n\ncreate categories: is country currency or crypto create four plots: map with overlay; bar plot with euro, usd & common crypto values; highest value; 7 day trend, 1 month trend\n1 month trend and 7 day trend done currency type done country value done"
  }
]