---
title: "ST558 - Project 2 - Shinies!"
author: "Laraib Azmat"
format: html
editor: visual
---

```{r Library read in}
library(httr)
library(jsonlite)
library(tidyverse)
library(janitor)
library(dplyr)
library(r2country)
```

```{r}
just_values <- function(date, currency){
  
  URL <- paste("https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@",
               date,
               "/v1/currencies/",
               currency,
               ".json",
               sep = "")
  
  value_parse <- GET(URL)$content |>
    rawToChar() |>
    fromJSON() |>
    as_tibble()
  
  value_parse <- bind_rows(value_parse[[2]], .id = "currency") |>
    pivot_longer(cols = everything())

  return(value_parse)
}
```

```{r}
just_values("2024-06-05", "zmk")
```
```{r}
just_names <- function(date){
  
  currency_api_URL <- paste("https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@",
               date,
               "/v1/currencies.json",
               sep = "")
  
  name_parse <- GET(currency_api_URL)$content |>
    rawToChar() |>
    fromJSON() |>
    as.data.frame() |>
    as_tibble()|> 
    mutate(obs.number = row_number()) |>
    pivot_longer(-obs.number,
               values_to = "Currency")
  
  name_parse[name_parse == ""] = NA
  
  names(name_parse)[names(name_parse) == 'Currency'] <- 'currency_name'
  
  name_parse$name <- gsub("^X", "", name_parse$name)

  name_parse$name[1:2] <- gsub("^.", "$", name_parse$name[1:2])
  
  return(name_parse)
}
```

```{r}
just_names("2024-06-05")
```

```{r}
get_isocode <- function(date, full_currency_name){
  
  directory <- just_names(date)
  
  if(!(full_currency_name %in% directory$currency_name)){
    stop("Currency not found, please check currency name") 
  }  
  
  else if(full_currency_name %in% directory$currency_name){
    
    match <- full_currency_name
    currency_code <- as.character(directory[which(directory$currency_name == match), "name"])
    
    return(currency_code)
  }
}
```


```{r}
get_isocode("2024-03-02", "Aergo")
```

```{r}
combine_names_currency <- function(date, full_currency_name){  
  
    cur_code <- get_isocode(date, full_currency_name)
  
    cur_names <- just_names(date)
  
    cur_value <- just_values(date, cur_code)
  
    matchlist = c("usd","eur", "btc", "eth", cur_code)
  
    full_conversion <- full_join(cur_names, cur_value)
  
    full_conversion <- full_conversion |>
      select(name, currency_name, value)|>
      arrange(!name %in% matchlist) 
  
    return(full_conversion)
}
```

```{r}
combine_names_currency("2024-06-05", "Aergo")
```

```{r}
add_country_type <- function(date, full_currency_name, country_name){
  
  names(country_names)[names(country_names) == 'name'] <- 'country_name'
  
  country <- full_join(country_money, country_names)

  names(country)[names(country) == 'isocode'] <- 'name'
  
  country <- country |>
    mutate(name = tolower(name))|>
    select(name, country_name) 
  
  
  convert_money <- combine_names_currency(date, full_currency_name)
  
  convert_money$type <- NA

  country_convert <- left_join(convert_money, country)

  country_convert <- country_convert |>
    mutate(country_name = if_else(currency_name == "Zimbabwean Dollar", "Zimbabwe", country_name)) |>
    mutate(type = if_else(is.na(country_name), "crypto", "physical"))
  
  return(country_convert)
  
}
```

```{r}
add_country_type("2024-06-05", "Aergo")
```

```{r}
type_only <- function(date, full_currency_name){
  with_dups <- add_country_type(date, full_currency_name)
  
  without_dups <- with_dups |>
    select(!country_name) |>
    distinct(name, .keep_all = TRUE)
  
  without_dups
}
```

```{r}
type_only("2024-06-05", "Aergo")
```

```{r}
currency_trend_day <- function(date, full_currency_name){
  
  date_value  <- as.Date(date)
  
  minus_7 <- date_value

  if(!(minus_7 > as.Date("2024-03-02"))){
  stop("Date out of range for api") 
    }  
  
  else {
    currency_trend <- type_only(minus_7, full_currency_name)
    
    return(currency_trend)
  }
}
```

```{r}
currency_trend_day("2024-06-05", "Tenset")
```

```{r}
currency_trend_month <- function(date, full_currency_name){
  
  date_value  <- as.Date(date)
  
  minus_30 <- date_value - 30
  
  if(!(minus_30 > as.Date("2024-03-02"))){
  stop("Date out of range for api") 
  }  
  
  else {
    currency_trend <- type_only(minus_30, full_currency_name)
        
    return(currency_trend)
  }
}
```

```{r}
currency_trend_month("2024-06-05", "Aergo")
```


```{r}
final_function <- function(date, full_currency_name){
  
  final_values <- add_country_type(date, full_currency_name)
  seven_day_trend <- currency_trend_day(date, full_currency_name)
  month_trend <- currency_trend_month(date, full_currency_name)
  
  values <- list(final_values, seven_day_trend, month_trend)
  
  return(values)
}
```

```{r}
final_function("2024-06-05", "Aergo")
```


create categories: is country currency or crypto
create four plots: map with overlay; bar plot with euro, usd & common crypto values; highest value; 7 day trend, 1 month trend

1 month trend and 7 day trend done
currency type done
country value done




